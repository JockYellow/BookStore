diff --git a/static/js/products.js b/static/js/products.js
--- a/static/js/products.js
+++ b/static/js/products.js
@@
-    let allProducts = []; // 用於儲存所有商品資料
+    let allProducts = []; // 用於儲存所有商品資料
+    /**
+     * 根據搜尋文字、分類與庫存狀態過濾商品，並重新渲染表格。
+     */
+    const filterAndRender = () => {
+        const searchText = searchInput.value.trim().toLowerCase();
+        const category = categoryFilter.value;
+        const status = statusFilter.value;
+        const filtered = allProducts.filter(p => {
+            const nameMatch = (p.name || '').toLowerCase().includes(searchText);
+            const barcodeMatch = (p.barcode || '').toLowerCase().includes(searchText);
+            const matchSearch = nameMatch || barcodeMatch;
+            const matchCategory = category === '' || p.category === category;
+            const stock = parseInt(p.stock, 10) || 0;
+            const min = parseInt(p.minStock, 10) || 5;
+            let statusMatch = true;
+            if (status === 'instock') statusMatch = stock > min;
+            if (status === 'low')     statusMatch = stock > 0 && stock <= min;
+            if (status === 'out')     statusMatch = stock <= 0;
+            return matchSearch && matchCategory && statusMatch;
+        });
+        renderTable(filtered);
+    };
+
+    // 註冊搜尋與篩選事件，當輸入或選取變更時自動過濾
+    searchInput.addEventListener('input', filterAndRender);
+    categoryFilter.addEventListener('change', filterAndRender);
+    statusFilter.addEventListener('change', filterAndRender);
@@
-     // 處理表單提交
-     const handleFormSubmit = async () => {
+     // 呼叫 API 新增商品
+     const createProduct = async (productData) => {
+         const res = await fetch('/api/products', {
+             method: 'POST',
+             headers: { 'Content-Type': 'application/json' },
+             body: JSON.stringify(productData)
+         });
+         if (!res.ok) {
+             const err = await res.json().catch(() => ({}));
+             throw new Error(err.detail || '新增商品失敗');
+         }
+         return res.json();
+     };
+     // 呼叫 API 更新商品
+     const updateProductApi = async (id, productData) => {
+         const res = await fetch(`/api/products/${id}`, {
+             method: 'PUT',
+             headers: { 'Content-Type': 'application/json' },
+             body: JSON.stringify(productData)
+         });
+         if (!res.ok) {
+             const err = await res.json().catch(() => ({}));
+             throw new Error(err.detail || '更新商品失敗');
+         }
+         return res.json();
+     };
+     // 呼叫 API 刪除商品
+     const deleteProductApi = async (id) => {
+         const res = await fetch(`/api/products/${id}`, { method: 'DELETE' });
+         if (!res.ok) {
+             const err = await res.json().catch(() => ({}));
+             throw new Error(err.detail || '刪除商品失敗');
+         }
+     };
+
+     // 處理表單提交
+     const handleFormSubmit = async () => {
@@
-         // 在靜態網站中，我們不能真的提交表單，這裡僅為示範
-         // 實際部署時，這些操作 (新增/編輯/刪除) 會無法運作
-         if (isEdit) {
-              console.log("更新商品:", productId, productData);
-         } else {
-              console.log("新增商品:", productData);
-         }
-         window.app.ui.showNotification('info', '靜態頁面不支持此操作');
-         closeModal();
+         // 呼叫後端 API 儲存商品資料
+         window.app.ui.showLoading('儲存中...');
+         try {
+             if (isEdit) {
+                 await updateProductApi(productId, productData);
+                 window.app.ui.showNotification('success', '商品已更新');
+             } else {
+                 await createProduct(productData);
+                 window.app.ui.showNotification('success', '商品已新增');
+             }
+             await loadProducts();
+         } catch (error) {
+             console.error('儲存失敗:', error);
+             window.app.ui.showNotification('error', error.message);
+         } finally {
+             window.app.ui.hideLoading();
+             closeModal();
+         }
@@
-         if (target.closest('.delete-btn')) {
-             window.app.ui.showConfirmDialog({
-                 title: '確認刪除',
-                 message: `您確定要刪除商品 #${productId} 嗎？此操作無法復原。`,
-                 confirmText: '確認刪除',
-             }).then(confirmed => {
-                 if (confirmed) {
-                     // 靜態網站無法真的刪除
-                     window.app.ui.showNotification('info', '靜態頁面不支持刪除操作');
-                 }
-             });
-         }
+         if (target.closest('.delete-btn')) {
+             window.app.ui.showConfirmDialog({
+                 title: '確認刪除',
+                 message: `您確定要刪除商品 #${productId} 嗎？此操作無法復原。`,
+                 confirmText: '確認刪除',
+             }).then(async (confirmed) => {
+                 if (confirmed) {
+                     window.app.ui.showLoading('刪除中...');
+                     try {
+                         await deleteProductApi(productId);
+                         window.app.ui.showNotification('success', '商品已刪除');
+                         await loadProducts();
+                     } catch (error) {
+                         console.error('刪除失敗:', error);
+                         window.app.ui.showNotification('error', error.message);
+                     } finally {
+                         window.app.ui.hideLoading();
+                     }
+                 }
+             });
+         }
